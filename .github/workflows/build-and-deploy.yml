name: Deploy no Minikube Local

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v4

      # Passo 2: Instalar Minikube
      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo chmod +x minikube
          sudo mv minikube /usr/local/bin/

      # Passo 3: Iniciar Minikube (cluster local)
      - name: Start Minikube
        run: |
          minikube start --driver=docker

      # Passo 4: Instalar o kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.23.5/bin/linux/amd64/kubectl"
          sudo chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Passo 5: Configurar kubectl para usar Minikube
      - name: Set kubectl context for Minikube
        run: |
          kubectl config use-context minikube

      # 2. Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Definir a versão (para PRs ou Push)
      - name: Set version and commit SHA
        id: version
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "VERSION=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          fi
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # 4. Build da imagem Docker
      - name: Build and Push Docker image
        run: |
          eval $(minikube docker-env)
          cd hello-world-api
          docker build -t ${{ secrets.DOCKER_USERNAME }}/hello-world-api:${{ env.VERSION }}-${{ env.COMMIT_SHA }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/hello-world-api:${{ env.VERSION }}-${{ env.COMMIT_SHA }}

      # Passo 9: Configurar ngrok para expor Minikube
      - name: Expose Minikube using ngrok
        run: |
          # Instalar ngrok
          curl -s https://ngrok.com/download | unzip - && sudo mv ngrok /usr/local/bin/

          # Expor a API do Kubernetes via ngrok
          nohup ngrok http 30080
          
          # Espera o ngrok ficar disponível
          sleep 10

      # Passo 10: Configurar kubectl para acessar Minikube via ngrok
      - name: Set kubectl context for Minikube through ngrok
        run: |
          kubectl config set-cluster minikube --server=https://your-ngrok-url:30080 --insecure-skip-tls-verify=true
          kubectl config use-context minikube

      # Passo 11: Atualizar a imagem do deployment com kubectl set image
      - name: Set image for Kubernetes deployment
        run: |
          kubectl set image deployment/hello-world-api hello-world-container=${{ secrets.DOCKER_USERNAME }}/hello-world-api:${{ env.VERSION }}-${{ env.COMMIT_SHA }} -n devops-challenge

      # Passo 12: Verificar o status do deployment
      - name: Verify Kubernetes deployment
        run: |
          kubectl rollout status deployment/hello-world-api -n devops-challenge

      # Passo 13: Verificar os pods
      - name: Check if pods are running
        run: |
          kubectl get pods -n devops-challenge
